{"version":3,"sources":["card.jsx","Participate.jsx","StartGame.js","App.js","index.js"],"names":["Card","rank","suite","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","props","color","number","react_default","a","createElement","className","React","Component","Participate","cards","showCards","isDealer","i","length","cardRendered","key","card_Card","push","renderCards","RoundStage","freeze","Betting","DealingCards","Double","HitOrStand","Standing","RoundEnded","RoundResult","None","ParticipateWon","DealerWon","Duce","StartGame","startBetting","state","roundInfo","stage","result","none","setState","participateCards","delearCards","potChips","getCard","participateCardsStateName","getReandomCard","onFinishBetting","setTimeout","moveToHitOrStandStage","isParticipateHasBlackJack","onRoundHasWinner","doubleAllowed","onHitHandler","getMaxSum","console","log","pullDealerCards","maxDelearSum","maxParticipateSum","roundResult","onDoubleHandler","j","count","chipID","onBetHandler","onStandHandler","onRemoveBetHandler","totalChips","totalPotChips","Math","floor","random","card","cardsSum","getTotalPotChips","bigSum","smallSum","_this2","profit","betButtonClass","hitAndStandButtonsClass","doubleButtonClass","disabled","onClick","chipInfo","_this3","betChips","isBettingStage","colorName","renderChipInfo","min","renderBetSameChip","_this4","black_chip","blue_chip","purple_chip","orange_chip","red_chip","potClassName","chipsPot","renderBetChips","getPotClassName","Participate_Participate","renderChips","renderPotChips","renderPlayerActionsButtons","AppCls","onClickHandler","e","isGameStarted","StartGame_StartGame","root","document","getElementById","ReactDOM","render","App_AppCls","greet"],"mappings":"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","file":"static/js/main.d1f5b69f.chunk.js","sourcesContent":["import React from 'react'\nimport './card.css'\n\n\nclass Card extends React.Component{\n\tconstructor(rank, suite) {\n        super()\n        this.props = {rank, suite}\n      }\n\n\trender(){\n            let color;\n            switch(this.props.suite) {\n                case '♠':\n                    color = 'black'\n                    break;\n                case '♥':\n                    color = 'red'\n                    break;\n                case '♣':\n                    color = 'black'\n                    break;\n                case '♦':\n                    color = 'red'\n                    break;\n            }\n            let rank;\n            switch(this.props.rank) {\n                case 11:\n                    rank = 'J'\n                    break;\n                case 12:\n                    rank = 'Q'\n                    break;\n                case 13:\n                    rank = 'K'\n                    break;\n                case 1:\n                    rank = 'A'\n                    break;\n                default:\n                    rank = this.props.rank\n            }\n\n            let number = 'number ' +  color\n            let suite = 'suite ' +  color\n\n            return <div className='card_border'> \n                <span className={number} > {rank}</span>\n                <span className={suite}> {this.props.suite} </span>\n            </div> \n\t\t}\n}\n\nexport {Card};","import React from 'react'\nimport './card.css'\nimport {Card} from './card.jsx'\n\nclass Participate extends React.Component{\n\tconstructor(cards, showCards, isDealer) {\n        super()\n        this.props = {cards, showCards, isDealer}\n      }\n    renderCards(){\n        let cards = [];\n\n        for (let i =0; i < this.props.cards.length; i++)\n        {   \n            const className = this.props.isDealer? 'tomer-to-dealer': 'tomer-to-participate';\n            const cardRendered = (\n                <div className='deck'>\n                        <div className={className}>\n                            <div className=\"card__face card__face--front\" key={i}></div>\n                            <div className=\"card__face card__face--back\" key={i}>\n                                <Card className=\"card\"  key={i} rank={this.props.cards[i].rank} suite={this.props.cards[i].suite}> </Card>\n                            </div>\n                        </div>\n                    </div>)\n\n            cards.push(cardRendered)\n        }\n        return cards\n    }\n\n    render(){\n        let className = this.props.showCards ? 'cards' :  this.props.isDealer? 'card dealer-card-disappear' : 'card participate-card-disappear';\n\n        return <div className={className}> {this.renderCards()} </div>\n    }\n}\n\nexport {Participate};","import React from 'react'\nimport {Participate} from './Participate.jsx'\nimport {Card} from './card.jsx'\n\nvar RoundStage = Object.freeze({Betting:1, DealingCards:2, Double:3 ,HitOrStand:4, Standing:5, RoundEnded:6})       \nvar RoundResult = Object.freeze({None:1, ParticipateWon:2, DealerWon:3, Duce:4 })       \n\nclass StartGame extends React.Component {\n\n\tconstructor() {\n\t  super()\n\t  this.state = {\n        participateCards:[],\n        delearCards:[],\n        roundInfo : {stage: RoundStage.Betting, result: RoundResult.none},\n        totalChips: 200,\n        potChips: [],\n      }\n\t}\n\n    getTotalPotChips(){\n        let totalPotChips = 0;\n        for (let i =0; i < this.state.potChips.length; i++){\n            totalPotChips += (this.state.potChips[i].chipID*this.state.potChips[i].count); \n        }\n        return totalPotChips;\n    }\n\n    getReandomCard() {\n        let rank = Math.floor((Math.random() * 13) + 1);\n        let randomSuit = Math.floor((Math.random() * 4) + 1);\n        let suite;\n        switch(randomSuit) {\n            case 1:\n                suite ='♠'\n                break;\n            case 2:\n                suite ='♥'\n            break;\n            case 3:\n                suite ='♣'\n                break;\n            case 4:\n                suite ='♦'\n                break;\n          }\n        return {rank, suite}\n    }\n\n    startBetting = () =>{\n        let potChips = []\n        let participateCards = [];\n        let delearCards = [];\n        this.state.roundInfo.stage = RoundStage.Betting;\n        this.state.roundInfo.result = RoundResult.none\n        this.setState({participateCards:participateCards, delearCards:delearCards, potChips});\n    }\n\n    getCard = (participateCards, participateCardsStateName) =>{\n        participateCards.push(this.getReandomCard())\n        this.setState({participateCardsStateName:participateCards});\n    }\n\n    onFinishBetting = () =>{        \n        if (this.state.potChips.length > 0)\n        {\n            this.state.roundInfo.stage = RoundStage.DealingCards;\n            this.setState({roundInfo:this.state.roundInfo});\n            setTimeout(() => { this.getCard(this.state.participateCards, 'participateCards')}, 800)\n            setTimeout(() => { this.getCard(this.state.delearCards, 'delearCards')}, 1500)\n            setTimeout(() => { this.getCard(this.state.participateCards, 'participateCards')}, 2200)\n            setTimeout(this.moveToHitOrStandStage, 3300)\n        }\n    }\n\n    isParticipateHasBlackJack(){\n        let participateCards = this.state.participateCards\n        let delearCards = this.state.delearCards\n        return participateCards.length ===2 && this.getMaxSum(participateCards) === 21 && this.getMaxSum(delearCards) < 21;\n    }\n\n    getCardValue(card)\n    {   \n        let cardValue;\n        if (card.rank === 1){\n            cardValue = 1\n        } \n        else if (card.rank > 10)\n        {\n            cardValue = 10\n        } \n        else{\n            cardValue = card.rank;\n        } \n        return cardValue;\n    }\n    \n    doubleAllowed(){\n        let cardsSum = this.getMaxSum(this.state.participateCards);\n        let totalChips = this.state.totalChips;\n        return (cardsSum <= 11 && cardsSum >=9) && totalChips >= this.getTotalPotChips();\n    }\n    \n    moveToHitOrStandStage = () =>{\n        let roundInfo = this.state.roundInfo\n\n        if (this.isParticipateHasBlackJack())\n        {\n            setTimeout(() => {\n                roundInfo.result = RoundResult.ParticipateWon;;\n                this.onRoundHasWinner({roundInfo})}, 1200);\n\n        } else{\n            if (this.doubleAllowed()){\n                roundInfo.stage = RoundStage.Double;\n            }\n            else{\n                roundInfo.stage = RoundStage.HitOrStand;\n            }  \n            \n            this.setState({roundInfo});\n        }\n    }\n\n\tonHitHandler = () => {\n        if (this.state.roundInfo.stage != RoundStage.HitOrStand && this.state.roundInfo.stage != RoundStage.Double)\n        {\n            return;\n        }\n        let participateCards = this.state.participateCards\n        participateCards.push(this.getReandomCard())\n        this.setState({participateCards: participateCards})\n        \n        let maxSum = this.getMaxSum(participateCards)\n        if (maxSum > 21 ){\n\n            console.log('over 21!!!')\n            setTimeout(() => {\n                let roundInfo = this.state.roundInfo\n                roundInfo.stage = RoundStage.RoundEnded;\n                roundInfo.result = RoundResult.DealerWon;\n                this.setState({roundInfo})}, 800);\n        }\n    }\n\n    getMaxSum(cards)\n    {\n        let bigSum = 0;\n        let smallSum = 0;\n        for (let i =0; i < cards.length; i++){\n            if (cards[i].rank === 1){\n                smallSum += 1\n                bigSum += 11\n                if (bigSum > 21){\n                    bigSum -=10;\n                }\n            } \n            else if (cards[i].rank > 10)\n            {\n                smallSum += 10\n                bigSum +=10;\n            } \n            else{\n                bigSum += cards[i].rank;\n                smallSum += cards[i].rank;\n            }\n        }\n\n        if (bigSum > 21)\n        {\n            return smallSum;\n        }else{\n            return bigSum;\n        }\n    }\n\n    pullDealerCards = () => {\n        let delearCards = this.state.delearCards\n\n        delearCards.push(this.getReandomCard())\n\n        let maxDelearSum = this.getMaxSum(delearCards);\n        let maxParticipateSum = this.getMaxSum(this.state.participateCards);\n\n        let roundResult = RoundResult.none;\n        if (maxDelearSum > 16){\n            if (maxDelearSum > 21)\n            {\n                roundResult = RoundResult.ParticipateWon;\n            }\n            else\n            {\n                if (maxDelearSum > 16)\n                {\n                    if (maxParticipateSum > maxDelearSum)\n                    {\n                        roundResult = RoundResult.ParticipateWon;\n                    }\n                    else{\n                        if (maxParticipateSum === maxDelearSum)\n                        {\n                            roundResult = RoundResult.Duce;\n                        }\n                        else{\n                            roundResult = RoundResult.DealerWon;\n                        }\n                    }\n                }\n            }\n        }\n\n        this.setState({delearCards:delearCards})\n\n        if (roundResult === RoundResult.none)\n        {\n            setTimeout(this.pullDealerCards, 800)\n        }\n        else{\n            this.onRoundHasWinner(roundResult)\n        }\n\n    }\n\n    onRoundHasWinner(roundResult)\n    {\n        let totalChips = this.state.totalChips\n\n        switch(roundResult) {\n            case RoundResult.ParticipateWon:\n                let profit;\n                if (this.isParticipateHasBlackJack())\n                {\n                    profit = Math.floor(this.getTotalPotChips() * 2.5 + 1);\n                } else\n                {\n                    profit = this.getTotalPotChips() * 2;\n                }\n                totalChips += profit;\n                break;\n            case RoundResult.Duce:\n                totalChips += this.getTotalPotChips()\n                break;\n        }\n        \n        setTimeout(() => {\n            this.state.roundInfo.stage = RoundStage.RoundEnded;\n            this.state.roundInfo.result = roundResult;\n            this.setState({totalChips:totalChips})}, 800);\n    }\n    \n    onDoubleHandler = () => {\n        if (this.state.roundInfo.stage != RoundStage.Double)\n        {\n            return;\n        }\n        let potChips = [];\n        for (var i = 0; i < this.state.potChips.length; i++)\n        {\n            for (var j = 0; j < this.state.potChips[i].count; j++)\n            {\n                potChips.push({chipID: this.state.potChips[i].chipID, count:this.state.potChips[i].count});\n            }\n        }\n        \n        for (var i = 0; i < potChips.length; i++)\n        {\n            for (var j = 0; j < potChips[i].count; j++)\n            {\n                console.log(potChips[i].chipID)\n                this.onBetHandler(potChips[i].chipID);\n            }\n        }\n        \n        this.onHitHandler()\n        this.onStandHandler()\n    }\n\n    onStandHandler = () => {\n        if (this.state.roundInfo.stage != RoundStage.HitOrStand && this.state.roundInfo.stage != RoundStage.Double)\n        {\n            return;\n        }\n\n        let roundInfo  = this.state.roundInfo\n        roundInfo.stage = RoundStage.Standing;\n        this.setState({roundInfo})\n        setTimeout(this.pullDealerCards, 400)\n    }\n\n    onRemoveBetHandler = (chipID) => {\n        if (this.state.roundInfo.stage != RoundStage.Betting)\n        {\n            return;\n        }\n\n        for (var i = 0; i < this.state.potChips.length; i++)\n        {\n            if (this.state.potChips[i].chipID == chipID)\n            {\n                this.state.potChips[i].count -= 1;\n                break;\n            }\n        }\n\n        let potChips = [];\n        for (var i = 0; i < this.state.potChips.length; i++)\n        {\n            if (this.state.potChips[i].count > 0)\n            {\n                potChips.push(this.state.potChips[i]);\n            }\n        }\n\n        this.state.potChips = potChips;\n\n        let totalChips = this.state.totalChips + chipID;\n        this.setState({totalChips})\n    }\n\n    onBetHandler = (chipID) => {\n        if (this.state.roundInfo.stage != RoundStage.Betting && this.state.roundInfo.stage != RoundStage.Double)\n        {\n            return;\n        }\n        if (this.state.totalChips >= chipID)\n        {   \n            var i = 0;\n            for (; i < this.state.potChips.length; i++)\n            {\n                if (this.state.potChips[i].chipID == chipID)\n                {\n                    console.log(chipID)\n\n                    this.state.potChips[i].count += 1;\n                    break;\n                }\n            }\n            if (i === this.state.potChips.length)\n            {\n                this.state.potChips.push({chipID: chipID, count:1});\n            }\n\n            let totalChips = this.state.totalChips - chipID;\n            this.setState({totalChips})\n        }\n    }\n\n    renderPlayerActionsButtons(){\n        let betButtonClass = 'disabled';\n        let hitAndStandButtonsClass = 'disabled';\n        let doubleButtonClass = 'disabled';\n\n        if (this.state.roundInfo.stage === RoundStage.Betting &&  (this.getTotalPotChips() > 0))\n        {\n            betButtonClass = ''             \n        }\n        \n        if (this.state.roundInfo.stage != RoundStage.RoundEnded && this.state.roundInfo.stage != RoundStage.Betting){\n            \n            if (this.state.roundInfo.stage != RoundStage.Standing &&\n                this.state.roundInfo.stage != RoundStage.DealingCards){\n                    hitAndStandButtonsClass = '';\n                }\n\n            if (this.state.roundInfo.stage == RoundStage.Double){\n                doubleButtonClass = '';\n            } \n\n        }\n        \n        return (\n            <div className='player-actions'>\n                <button className='hit-stand-buttons_layout' disabled={betButtonClass}  onClick={this.onFinishBetting}>💰 BET</button>    \n                <button className='hit-stand-buttons_layout' disabled={hitAndStandButtonsClass} onClick={this.onHitHandler}> 👊 HIT </button>\n                <button className='hit-stand-buttons_layout' disabled={hitAndStandButtonsClass} onClick={this.onStandHandler}> ✋ STAND </button> \n                <button className='hit-stand-buttons_layout' disabled={doubleButtonClass} onClick={this.onDoubleHandler}>🤩 DOUBLE </button> \n            </div>)\n    }\n\n    renderBetSameChip(chipInfo){\n        let betChips = [];\n        const isBettingStage = this.state.roundInfo.stage === RoundStage.Betting ? '' : 'disabled';\n        for (var i = 0; i < chipInfo.count; i++)\n        {   \n            let colorName;\n            switch (chipInfo.chipID){\n                case 1:\n                    colorName = 'small-chip red-chip ' + isBettingStage\n                    break;\n                case 5:\n                    colorName = 'small-chip orange-chip ' + isBettingStage\n                    break;\n                case 10:\n                    colorName = 'small-chip purple-chip ' + isBettingStage\n                    break;\n                case 25:\n                    colorName = 'small-chip blue-chip ' + isBettingStage\n                    break;\n                case 100:\n                    colorName = 'small-chip black-chip ' + isBettingStage\n                    break;\n            }\n            console.log(colorName)\n            betChips.push(<div > \n                            <button className={colorName}  key={i} onClick={()=>this.onRemoveBetHandler(chipInfo.chipID)}> </button>\n                         </div>)\n        }\n        return betChips\n    }\n\n    renderBetChips(){\n        let betChips = [];\n\n        for (var i = 0; i < this.state.potChips.length; i++) {\n            var chipInfo = this.state.potChips[i];\n            if (chipInfo.count > 0)\n            {   \n                var count = chipInfo.count;\n                console.log(chipInfo.count)\n                for (var j = 0; j < chipInfo.count ; j+=4)\n                {              \n                    let renderChipInfo = {chipID:chipInfo.chipID, count:Math.min(count, 4)}\n\n                    betChips.push(<div className={'same-chip'} key={i+j}> {this.renderBetSameChip(renderChipInfo)} </div>)\n                    if (count > 4)\n                    {\n                        count -= 4;\n                    }\n                }\n            }\n        }\n        return betChips\n    }\n    renderChips(){\n        const isBettingStage = this.state.roundInfo.stage === RoundStage.Betting;\n        let black_chip = isBettingStage && this.state.totalChips >= 100 ? 'chip-button black-chip' : 'chip-button black-chip disabled';\n        let blue_chip = isBettingStage && this.state.totalChips >= 25 ? 'chip-button blue-chip' : 'chip-button blue-chip disabled';\n        let purple_chip = isBettingStage && this.state.totalChips >= 10 ? 'chip-button purple-chip' : 'chip-button purple-chip disabled';\n        let orange_chip = isBettingStage && this.state.totalChips >= 5 ? 'chip-button orange-chip' : 'chip-button orange-chip disabled';\n        let red_chip = isBettingStage && this.state.totalChips >= 1 ? 'chip-button red-chip' : 'chip-button red-chip disabled';\n        return (\n            <div className='chips_layout'>\n                <div className='chips'>\n                    <button className={red_chip} onClick={()=>this.onBetHandler(1)}> 1 </button>\n                    <button className={orange_chip} onClick={()=>this.onBetHandler(5)}> 5 </button>\n                    <button className={purple_chip} onClick={()=>this.onBetHandler(10)}> 10 </button>\n                    <button className={blue_chip} onClick={()=>this.onBetHandler(25)}> 25 </button>\n                    <button className={black_chip}  onClick={()=>this.onBetHandler(100)}> 100 </button>\n                </div>\n                <span className=\"tooltiptext\">Total Chips: {this.state.totalChips}</span>\n            </div>\n        )\n    }\n\n    getPotClassName(){\n        let potClassName = 'chips_pot ';\n        if (this.state.roundInfo.result === RoundResult.DealerWon){\n            potClassName += 'lost_chips_pot';\n        }\n        else if (this.state.roundInfo.result === RoundResult.ParticipateWon || this.state.roundInfo.result === RoundResult.Duce )\n        {\n            potClassName += 'participate_won';\n        }\n        return potClassName;\n    }\n\n    renderPotChips(){\n        let chipsPot = [];\n\n        if (this.state.roundInfo.result === RoundResult.ParticipateWon)\n        {\n            chipsPot.push(<div className= 'delear_chips_pot'> {this.renderBetChips()}</div>)\n        }\n        chipsPot.push(<div className={this.getPotClassName()}> {this.renderBetChips()}\n                         <span className=\"tooltiptext\">Current Bet: {this.getTotalPotChips()}</span>\n                     </div>)\n        return chipsPot;\n    }\n\n\n    // TODO (tomert)- Add a trash talk string (choosing a random TT string from a list)\n\trender(){\n        if  (this.state.roundInfo.stage === RoundStage.RoundEnded)\n        {\n            setTimeout(this.startBetting, 2000)\n        }\n        console.log('this.state.participateCards')\n\n        console.log(this.state.participateCards)\n        return (\n        <div className='container'>\n                <div className='deck'>\n                    <div className=\"deck-cards\"></div>\n                    <div className=\"deck-cards\"></div>\n                </div>\n                <div className='dealer_table'>\n                    <Participate cards={this.state.delearCards} showCards={this.state.roundInfo.stage != RoundStage.RoundEnded} isDealer={true} />\n                    <Participate cards={this.state.participateCards} showCards={this.state.roundInfo.stage != RoundStage.RoundEnded} isDealer={false} />\n                </div>\n                {this.renderChips()}\n                {this.renderPotChips()}\n                {this.renderPlayerActionsButtons()}\n        </div>);\n    }\t\t\n}\n\nexport {StartGame};","import React from 'react'\nimport {StartGame} from './StartGame';\nimport style from './App.css'\n\nclass AppCls extends React.Component {\n\t\t\n\tconstructor() {\n\t  super()\n\t  this.state = {\n\t\t\tisGameStarted : false,\n\t  }\n\t}\n\n\tonClickHandler = (e) => {\n\t\tthis.setState({'isGameStarted':true})\n\t}\n\trender(){\n\t\t\tif (!this.state.isGameStarted)\n\t\t\t{\n\t\t\t\treturn (<div className='container blackjack_logo'>\n\t\t\t\t\t<button className='start-game-button' onClick={this.onClickHandler}>\n\t\t\t\t\t\tStart Game \n\t\t\t\t\t</button>\n\t\t\t\t\t</div>); \t\n\t\t\t} \n\t\t\telse{\n\t\t\t\treturn <StartGame/>\n\t\t\t}\n\t\t}\n}\n\nexport {AppCls};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {AppCls} from './App';\n\nconst root = document.getElementById('root')\nReactDOM.render(<AppCls greet='Hello world' />, root);\n\n"],"sourceRoot":""}